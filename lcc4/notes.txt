--------------------------------------------------------------------------------------------------------
--Notes

{-
Example: run $ polyId ++ " @ Nat @ 6"

I think that this form for expressions would neatly allow us to express (right associative) nested abstractions
and chains of (left associative) applications.

data Expr' = Abs Abs [(Var, Expr'')] Expr' deriving Eq
data Expr'' = Lit Lit | Var Var | App Expr' [Expr'] deriving Eq

I have removed the possibility for "empty" variable names in an attempt to make the language
as simple to reason about as possible

I need to figure out under exactly what circumstances certain (alpha and/or beta equivalences)
should be permitted and how to implement alpha equivalence with as little unneccesary computation
as possible

I also need to figure out how to do (named) capture avoidance with as little computation as possible
(rapier method is a possibility)

I also want to figure out how I can consistently support the ability to not use a binder in an
abstraction when it will not be used in the output expression

I also want to figure out how I can support both nested abstractions and nested applications
(right and left associativity, respectively) in a consistent way, particularly since expressions like
"\x,y -> x" aren't currently supported.

I also need to figure out how to implement addition and boolean conjunction as example functions to work
with my pre-defined literal values
--------------------------------------------------------------------------------------------------------
VARIABLE CAPTURE:

I do need capture avoiding substitution:
"\\y:Nat -> ((\\x:Nat -> \\y:Nat -> x) @ y @ 2)"
beta reduces to:
"\\y:Nat -> ((           \\y:Nat -> y)     @ 2)"
then to:
"\\y:Nat ->                         2          "

What should have happened was:
"\\y:Nat -> ((\\x:Nat -> \\z:Nat -> x) @ y @ 2)"
beta reduces to:
"\\y:Nat -> ((           \\z:Nat -> y)     @ 2)"
then to:
"\\y:Nat ->                         y          "

This is in spite of the fact that
"(\\y:Nat -> ((\\x:Nat -> \\y:Nat -> x) @ y @ 2)) @ 5"
actually correctly reduces to 5, not 2 as suggested by the unapplied function
however this is still variable capture that needs to be dealt with

LITERALS:

I don't really know how to implement literals propperly. Can't figure out a propper way to implement conditional
branches (ifs, case statements, guards, pattern matching, etc..)
Would also be nice to add definitions and ADTs but I think this is going to far really.

UTILITY:

Get command line interface working propperly (maybe I can use Haskeline??)
all I really need is for arrow keys to exhibit their usual behavior with regards to the command line.

EXTRAS:

Maybe change error messages to reflect when someone has attempted to use a more powerful calculus than is allowed?

Consider the language extentions you were talking about which would allow for more easy nesting of abstractions
and applications and empty variables etc..
-}
