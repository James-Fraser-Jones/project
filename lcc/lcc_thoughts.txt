k ::= ∗
A ::= p | A → B
e ::= x | λx:A.e | e e

k ::= ∗
A ::= a | p | A → B | ∀a:k.A
e ::= x | λx:A.e | e e | Λa:k.e | e [A]

k ::= ∗ | k → k
A ::= a | p | A → B | ∀a:k.A | λa:k.A | A B
e ::= x | λx:A.e | e e | Λa:k.e | e [A]

k ::= ∗ | k → k | Πx:A.k
A ::= a | p | A → B | ∀a:k.A | λa:k.A | A B | Λx:A.B | A [e]
e ::= x | λx:A.e | e e | Λa:k.e | e [A]

only things added to lamda omega to make CoC are: Λx:A.B, A [e], Πx:A.k (abstraction, application and type for functions from Terms to Types)

T ::= ☐
k ::= ∗ |                                   Πx:A.k | Πx:k.k'
A ::= p | x | λx:A.B | λx:k.A | A e | A B | Πx:A.B | Πx:k.A
e ::= l | x | λx:A.e | λx:k.e | e e | e A
     Lit|Var|       Abs       |    App    |       Dep

So we have:

"Types" of the 4 different functions:
Πx:A.k | Πx:k.k'
Πx:A.B | Πx:k.A

The creation of the 4 different functions through abstraction:
λx:A.B | λx:k.A
λx:A.e | λx:k.e

The resolution of the 4 different functions through application:
A e | A B
e e | e A

Type and term variables: x (kind variables aren't used because we don't have functions from kinds to other types/terms/kinds)

Literal for top:    ☐
Literal for kinds:  *
Literals for types: p
Literals for terms: l

-----------------------------------------------------------------------
In detail:
Term to term function: λx:A.e (normal function, term level)
                 Type: Πx:A.B
                  App: e e

Type to term function: λx:k.e (polymorphism, term level)
                 Type: Πx:k.A
                  App: e A

Type to type function: λx:k.A (type operator, type level)
                 Type: Πx:k.k'
                  App: A B

Term to type function: λx:A.B (dependent type, type level)
                 Type: Πx:A.k
                  App: A e
------------------------------------------------------------------------
Another thing that I think:

Since: Πx:A.B = A -> B and A -> B : *, Πx:A.B : * : ☐
                                  and  Πx:k.k': ☐ (for the same reason)

But also: Πx:k.A = ∀x:k.A (but I don't know the type of this).

Finally, Πx:A.k has no equivalence to previous constructs and I still don't know the type of this.

Maybe we aren't technically supposed to find the types of types of functions?
------------------------------------------------------------------------
For a lambda abstraction, the type of the function that it creates is always in the above level.
Since we allow 2 different lambda abstractions at the Term level: Term to Term and Type to Term,
We therefore allow 2 different dep abstractions at the Type level to represent the type of each of these abstractions.

Similarly, we allow 2 different lambda abstractions at the Type level: Type to Type and Term to Type,
so we allow 2 different dep abstractions at the Kind level to represent the type of each of these abstractions.

Remember: "type" is representation of a construct in the level above
          "Type" is the 2nd of the 4 levels: Term, Type, Kind, Top
------------------------------------------------------------------------
T ::= ☐
k ::= ∗ |                                      Πx:A.k  | Π_:k.k'
A ::= p | a | λx:A.A' | λa:k.A | A e  | A A' | Π_:A.A' | Πa:k.A
e ::= l | x | λx:A.e  | λa:k.e | e e' | e A
     Lit|Var|        Abs       |     App     |        Dep

I rewrote the formulas to make it clear that A and A' are (potentially) different types, as are e and e' and k and k' for terms and kinds respectively.
------------------------------------------------------------------------
There is an odd inconsistency in the way you read abs and dep in spite of them having the same syntax.

λa:k.A = "This function takes in a value with type k to produce an A".
"k is a Kind, hence a is a Type, A is also a Type therefore the function is Type to Type".

Πa:k.k' = "This is the type of a function that takes in an 'a' (of type k) and produces a value (of type k')".
"since k and k' are both kinds, a is a Type and the value it outputs is also a Type therefore the function is Type to Type".

Put more clearly: λ(variable):(type).(output value)
                  Π(variable):(type).(type of output value)

Hence, the corresponding Π as the type of a λ will always have its output expression at 1 level higher than the λ's output expression
e.g. type to type function, output = type, λ output = type, Π output = type of (λ output) = type of type = * = kind
'
------------------------------------------------------------------------
Notice above that even without the abs, dep and app required for dependent types (i.e. removing λx:A.A', Πx:A.k and A e), at the type level we have:
A ::= p | a | λa:k.A | A A' | Π_:A.A' | Πa:k.A

We understand that the two remaining deps are only used to service the term level below so we can remove them too (Π_:A.A' and Πa:k.A) Now we have:

A ::= p | a | λa:k.A | A A' which is a STLC at the type level.

We can even show that the kind level above satisfies the STLC's type requirements:

k ::= ∗ | Π_:k.k' which equals: k ::= ∗ | k -> k' (base and function types where the type of all propper types is * )

This proves that lambda omega has an STLC at the type level due to its ability to express functions from types to types.
-------------------------------------------------------------------------
I can also see from this structure that there isn't really any sensible type for Πx:A.k nor for Πa:k.A = ∀x:k.A.

Why? It's because for an expression to have a type, there must be some construct in the level above to represent it.
In the case of Π_:A.A' = A -> A', the type is * (because A -> A' is a function type). It also happens that the kind level
only has 3 possibilities. 2 of them are deps which only leaves the literal *.

It the same case with Π_:k.k' = k -> k'. The type (by definition) of this function is ☐ but this also happens to be the only thing it could be
since the top level only has one expression which is exactly ☐.

So unless the type of EVERYTHING at the kind level is also supposed to be ☐, there is no sensible type for Πx:A.k.

Likewise, unless the type of ∀x:k.A. is ∗, Πx:A.k or Π_:k.k' there is no sensible type for it either.
-------------------------------------------------------------------------
How do I know that * and ☐ are literals? Also, why are literals for Terms not included by default? (The Type literal is included even in the earliest examples
as 'p').

When you think of a function at a specific level (i.e. at the level of Terms or Types as allowed by CoC), the type of that function can be represented by
a binary tree with leaves as literals of that level.

For instance, if we have a function 'f' at the Term level that takes in a function (that takes Terms of type int and returns Terms of type char)
and produces a Term of type bool. The type of f (at the Type level) looks like this f : (Int -> Char) -> Bool

As a tree.
      .
     / \
   .    Bool
  / \
Int Char

Crucially, leaves of this tree can be nothing other than literals at the Type level.

What would a function at the Type level look like?
We'll make a function with the same structure but at the Type level.

We have a function 'g' at the Type level that takes in a function (that takes Types of type * and returns Types of type *)
and produces a Type of type star. The type of f (at the Type level) looks like this g : (* -> *) -> *

As a tree.
      .
     / \
   .    *
  / \
 *   *

This informally shows how * can be considered to be the (only) literal at the Kind level.
And ☐ is similarly the only literal of the Top level (although functions are not permitted from Kinds of type ☐ to other Kinds of type ☐).

So now we know why * and ☐ are literals in the same sense that p is for the Type level.

Why do we not (by default) need Term literals?
This is because Literals are really only required for the purpose of expressing the type of a function at a certain level.
Needless to say, the term level is never used to express the type of a function from the level below because it's the bottom level.

If it did, it could look something like this. e : 1 -> 0
Of course, we do want literals at the type level so that we can easily do useful computations with CoC rather than attempting to
express everything using church encoding (which is maybe? possible but fiddly and unneccessary regardless).

However, from a purely technical point, we don't technically need literals at the term level. It suffices to just have a single type literal
so that abstractions at the type level can be satisfied i.e. (\x:p.y) where 'p' is the type literal.

This brings up another question, what is the type of a free variable at the term level? :S

If an expression with a free variable is considered to be well typed from the typing rules, the perspective from a programming langauge
would simply be that the free variable was undefined and throw an error.

-------------------------------------------------------------------------

At the Term level:

  The type of any Term literal l is the corresponding Type literal p which is decided to be the type of that term.
  For example, at the term level we have the literals 1, 2, 3, 4 etc.. and at the type level we have the corresponding literal 'Int'.

  The type of any Term variable x is either Nothing (ill typed) if the variable is free, or if it is bound then it appears
  in an abstraction like so: \x:T.e in which case the type of x is exactly as declared in this scope: T

  The type of any abstraction \x:T.e is precisely Πx:T.A (where e:A)

  The type of any application e e' (where e = \x:T.g, e':T, g:A) is A

At the Type level:

  All the same rules above apply to variables, abractions and applications.

  The type of any Type literal is the Kind literal *

  The type of the type of normal (Term level) functions, Π_:A.A' is also *

  The type of the type of polymorphic functions: Πa:k.A is also * (according to type formation 2 page 20 of Henk 2000 thesis)

At the kind level:

  The type of the Kind literal * is ☐

  The type of the type of Type functions, Π_:k.k' is also ☐

  The type of the type of dependent functions: Πx:A.k is also ☐

-------------------------------------------------------------------------

The word "type" is used to refer to 3 completely seperate things:

:, A, *.

1. e:F means that the expression e has the 'type' F (i.e. the representation of expression e in the level above is F)

2. A represents a 'Type' (i.e. an expression which is in the Type level, directly above the Term level)

3. * is called 'Type' (it's the only literal at the Kind level)

A very confusing yet technically correct sentence using all 3 definitions of type is the following:

"The type of any type literal is type."     p : *

which corresponds to:

"The 1 of any 2 literal is 3"         (2 lit) 1 3

-------------------------------------------------------------------------

Big question:

  Since 3 of the possible functions are capable of using expressions of sort Type as input and/or output.
  And since (A → A') and (Ɐa:k.A) have sort type, in addition to all the usual constructs which are the same in the Term level below.
  What does it mean (at a semantic level) to pass these constructs around?
  What use could we have for this functionality?

  Notably, it is only possible to do this with the types of term and polymorphic functions, but not
  with the types of term and dependent functions since they have sort Kind which prevents them from being used
  as the input or output of functions. (Because the Kind level doesn't have abstractions).
