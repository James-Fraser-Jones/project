% Relevant reading below:

% Wiki pages
https://en.wikipedia.org/wiki/Lambda_calculus
https://en.wikipedia.org/wiki/Lambda_calculus_definition#Standard_definition
https://en.wikipedia.org/wiki/Typed_lambda_calculus

https://en.wikipedia.org/wiki/Lambda_cube
https://en.wikipedia.org/wiki/Simply_typed_lambda_calculus
https://en.wikipedia.org/wiki/System_F
https://en.wikipedia.org/wiki/Calculus_of_constructions

https://en.wikipedia.org/wiki/Functional_programming
https://en.wikipedia.org/wiki/Haskell_(programming_language)

% Introductions to Lambda Calculus.
ftp://ftp.cs.ru.nl/pub/CompMath.Found/lambda.pdf
https://classes.soe.ucsc.edu/cmps112/Spring03/readings/lambdacalculus/project3.html

% Many examples of Lambda Calculus interpreters.
https://codegolf.stackexchange.com/questions/284/write-an-interpreter-for-the-untyped-lambda-calculus

% Write you a Haskell.
http://dev.stephendiehl.com/fun/

% Design of System F Omega language, starting from simply typed..
http://babel.ls.fi.upm.es/~pablo/Papers/Notes/f-fw.pdf
% Comparison of Haskell's type system to F Omega.
https://stackoverflow.com/questions/21219773/are-ghcs-type-famlies-an-example-of-system-f-omega
% Online F Omega interpreter.
http://ocamllabs.io/fomega/

% De_brujin indecies.
https://en.wikipedia.org/wiki/De_Bruijn_index
https://stackoverflow.com/questions/28931477/haskell-convert-de-bruijn-terms-to-lambda-terms-and-vice-versa
http://alexandria.tue.nl/repository/freearticles/597619.pdf
http://www.mi.sanu.ac.rs/~uros.m/logcom/hdb/Volume_11/Issue_03/pdf/110363.pdf

% Alternative to De_brujin indecies
http://pchiusano.github.io/2014-06-20/simple-debruijn-alternative.html

% Notes from Simon Peyton Jones and others on Haskell's intermediate language and more.
https://ghc.haskell.org/trac/ghc/wiki/Commentary/Compiler/FC
http://www.felienne.com/archives/721
http://laser.inf.ethz.ch/2012/slides/PeytonJones/Inference and FC.pdf
https://www.microsoft.com/en-us/research/people/simonpj/?from=http%3A%2F%2Fresearch.microsoft.com%2F%7Esimonpj%2Fpapers%2Fhaskell-retrospective

% Detailed rundown of all the calculi in the lambda cube.
https://cstheory.stackexchange.com/questions/36054/how-do-you-get-the-calculus-of-constructions-from-the-other-points-in-the-lambda
% Existing implementation of CoC.
https://github.com/MaiaVictor/calculus-of-constructions
% Pure type systems: more general than the lambda cube.
https://en.wikipedia.org/wiki/Pure_type_system

% Great explanation of Functors, Applicatives and Monads in Haskell.
http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html

% Relation between lambda Calculus, logical proofs and Cartesian closed categories.
https://en.wikipedia.org/wiki/Curryâ€“Howard_correspondence#Curry.E2.80.93Howard.E2.80.93Lambek_correspondence

%Strictness Analysis
https://en.wikipedia.org/wiki/Strictness_analysis
https://en.wikipedia.org/wiki/Evaluation_strategy#Non-strict_evaluation

%Henk, this might invalidate your entire project
https://www.microsoft.com/en-us/research/wp-content/uploads/1997/01/henk.pdf

%Henk 2000 Implementation of PTS as a programming language in Haskell
https://github.com/minad/henk
http://www.staff.science.uu.nl/~jeuri101/MSc/jwroorda/

%Pure type systems
https://en.wikiversity.org/wiki/Foundations_of_Functional_Programming/Comparison_of_%CE%BB-calculi
https://en.wikiversity.org/wiki/Foundations_of_Functional_Programming/Pure_type_systems

%Paper behind Agda's language which seems pretty advanced
http://www.cse.chalmers.se/~ulfn/papers/thesis.pdf
\fi
